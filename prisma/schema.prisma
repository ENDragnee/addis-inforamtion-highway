generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id               String        @id @default(cuid())
  name             String        @unique
  status           InstitutionStatus @default(ACTIVE)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  roleId           String
  role             Role          @relation(fields: [roleId], references: [id])
  clientId         String        @unique @default(cuid())
  publicKey        String 
  apiEndpoint      String
  requestsMade     DataRequest[] @relation("Requester")
  requestsReceived DataRequest[] @relation("Provider")
}

model Role {
  id                 String         @id @default(cuid())
  name               String         @unique
  description        String?
  dataSchemas        DataSchema[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  institutions       Institution[]
  requesterRelations Relationship[] @relation("RequesterRole")
  providerRelations  Relationship[] @relation("ProviderRole")
}

model Relationship {
  id              String             @id @default(cuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  status          RelationshipStatus @default(PENDING)
  requesterRoleId String
  requesterRole   Role               @relation("RequesterRole", fields: [requesterRoleId], references: [id])
  providerRoleId  String
  providerRole    Role               @relation("ProviderRole", fields: [providerRoleId], references: [id])
  dataSchemaId    String
  dataSchema      DataSchema         @relation(fields: [dataSchemaId], references: [id])
  dataRequests    DataRequest[]      

  @@unique([requesterRoleId, providerRoleId, dataSchemaId])
}

model User {
  id              String        @id @default(cuid())
  externalId      String        @unique
  verifaydaSub    String?       @unique
  fcmToken        String?       @unique 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  dataRequests    DataRequest[]
}

model DataSchema {
  id            String         @id @default(cuid())
  schemaId      String         @unique
  roles         Role[]
  parameters    Json?
  description   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  relationships Relationship[]
  dataRequests  DataRequest[]
}

model DataRequest {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  requesterId     String
  requester       Institution       @relation("Requester", fields: [requesterId], references: [id])
  providerId      String
  provider        Institution       @relation("Provider", fields: [providerId], references: [id])
  dataOwnerId     String
  dataOwner       User              @relation(fields: [dataOwnerId], references: [id], onDelete: Cascade)
  dataSchemaId    String
  dataSchema      DataSchema        @relation(fields: [dataSchemaId], references: [id])
  relationshipId  String            // NEW: links to Relationship
  relationship    Relationship      @relation(fields: [relationshipId], references: [id])
  status          DataRequestStatus @default(INITIATED)
  consentTokenJti String?           @unique
  expiresAt       DateTime
  failureReason   String?
  signatures      DataRequestSignature[]
  dataHash        String?
}
model DataRequestSignature {
  id            String        @id @default(cuid())
  dataRequestId String
  dataRequest   DataRequest   @relation(fields: [dataRequestId], references: [id])
  type          SignatureType
  signature     String
  createdAt     DateTime      @default(now())
}


enum SignatureType {
  REQUESTER
  PLATFORM
  PROVIDER
}

model SuperUser {
  id             String        @id @default(cuid())
  email          String        @unique
  name           String
  hashedPassword String
  role           SuperUserRole @default(SUPER_ADMIN)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum SuperUserRole {
  SUPER_ADMIN
}

enum DataRequestStatus {
  INITIATED
  AWAITING_CONSENT
  VERIFIED
  DELIVERED
  APPROVED
  DENIED
  COMPLETED
  FAILED
  EXPIRED
}

enum RelationshipStatus {
  PENDING
  ACTIVE
  REJECTED
  REVOKED
}

enum InstitutionStatus {
  ACTIVE    // The institution is fully operational.
  PENDING   // Awaiting approval by a superuser.
  SUSPENDED // Temporarily disabled.
}
