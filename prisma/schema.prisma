// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id        String @id @default(cuid())
  name      String @unique 
  users InstitutionUser[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  clientId String @unique @default(cuid())
  clientSecretHash String
  publicKey String
  apiEndpoint String
  requestsMade DataRequest[] @relation("Requester")
  requestsReceived DataRequest[] @relation("Provider")
}

model InstitutionUser {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  hashedPassword  String
  
  institutionId   String
  institution     Institution @relation(fields: [institutionId], references: [id])
  
  role            InstitutionUserRole @default(MEMBER)

  @@index([institutionId])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique 
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  institutions      Institution[]
  requesterRelations Relationship[] @relation("RequesterRole")
  providerRelations  Relationship[] @relation("ProviderRole")
}

model Relationship {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requesterRoleId String
  requesterRole   Role   @relation("RequesterRole", fields: [requesterRoleId], references: [id])
  providerRoleId String
  providerRole   Role   @relation("ProviderRole", fields: [providerRoleId], references: [id])
  dataSchemaId String
  dataSchema   DataSchema @relation(fields: [dataSchemaId], references: [id])
  @@unique([requesterRoleId, providerRoleId, dataSchemaId])
}

model User {
  id        String @id @default(cuid())
  externalId String @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  dataRequests DataRequest[]
}

model DataSchema {
  id          String   @id @default(cuid())
  schemaId    String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  relationships Relationship[]
  dataRequests  DataRequest[]
}

model DataRequest {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requesterId String
  requester   Institution @relation("Requester", fields: [requesterId], references: [id])
  providerId String
  provider   Institution @relation("Provider", fields: [providerId], references: [id])
  dataOwnerId String
  dataOwner   User   @relation(fields: [dataOwnerId], references: [id], onDelete: Cascade)
  dataSchemaId String
  dataSchema   DataSchema @relation(fields: [dataSchemaId], references: [id])
  status DataRequestStatus @default(INITIATED)
  consentTokenJti String? @unique
  expiresAt DateTime
  failureReason String?
}

enum DataRequestStatus {
  INITIATED 
  AWAITING_CONSENT 
  APPROVED 
  DENIED 
  COMPLETED 
  FAILED 
  EXPIRED 
}

enum InstitutionUserRole {
  ADMIN 
  MEMBER
}
